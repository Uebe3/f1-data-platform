"""Configuration for pytest testing."""

import os
import pytest


def pytest_configure(config):
    """Configure pytest with custom markers."""
    config.addinivalue_line("markers", "integration: marks tests as integration tests")
    config.addinivalue_line("markers", "slow: marks tests as slow running")
    config.addinivalue_line("markers", "aws: marks tests as AWS-specific") 
    config.addinivalue_line("markers", "azure: marks tests as Azure-specific")
    config.addinivalue_line("markers", "gcp: marks tests as GCP-specific")
    config.addinivalue_line("markers", "unit: marks tests as unit tests")


def pytest_collection_modifyitems(config, items):
    """Automatically mark tests based on their location."""
    rootdir = config.rootdir
    
    for item in items:
        # Get the relative path of the test file
        rel_path = os.path.relpath(item.fspath, rootdir)
        
        # Mark integration tests
        if "integration" in rel_path:
            item.add_marker(pytest.mark.integration)
        
        # Mark unit tests
        if "unit" in rel_path:
            item.add_marker(pytest.mark.unit)
        
        # Mark cloud-specific tests
        if "aws" in item.name.lower() or "s3" in item.name.lower():
            item.add_marker(pytest.mark.aws)
        elif "azure" in item.name.lower() or "blob" in item.name.lower():
            item.add_marker(pytest.mark.azure)
        elif "gcp" in item.name.lower() or "storage" in item.name.lower():
            item.add_marker(pytest.mark.gcp)


@pytest.fixture(scope="session")
def test_environment():
    """Setup test environment variables."""
    # Set test environment variables
    os.environ["F1_PIPELINE_ENV"] = "test"
    os.environ["F1_PIPELINE_LOG_LEVEL"] = "DEBUG"
    
    yield
    
    # Cleanup test environment
    if "F1_PIPELINE_ENV" in os.environ:
        del os.environ["F1_PIPELINE_ENV"]
    if "F1_PIPELINE_LOG_LEVEL" in os.environ:
        del os.environ["F1_PIPELINE_LOG_LEVEL"]


@pytest.fixture
def mock_openf1_response():
    """Mock response data from OpenF1 API."""
    return {
        "meetings": [
            {
                "meeting_key": 1219,
                "meeting_name": "Test Grand Prix",
                "year": 2023,
                "circuit_short_name": "Test Circuit",
                "date_start": "2023-01-01T10:00:00+00:00"
            }
        ],
        "sessions": [
            {
                "session_key": 9001,
                "meeting_key": 1219,
                "session_name": "Race",
                "session_type": "Race",
                "year": 2023,
                "date_start": "2023-01-01T14:00:00+00:00"
            }
        ],
        "drivers": [
            {
                "session_key": 9001,
                "meeting_key": 1219,
                "driver_number": 1,
                "full_name": "Test Driver 1",
                "name_acronym": "TD1",
                "team_name": "Test Team 1",
                "year": 2023
            }
        ]
    }